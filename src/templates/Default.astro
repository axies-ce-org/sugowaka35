---
import fs from 'node:fs';
import { twJoin } from 'tailwind-merge';
import '../styles/index.css';
import Footer from '../layouts/Footer.astro';

let pageData = [];
if (fs.existsSync('./static/pagedata.json')) {
  pageData = JSON.parse(fs.readFileSync('./static/pagedata.json', 'utf-8'));
}

export interface Props {
  title?: string;
  description?: string;
  ogType?: string;
  hasBorder?: boolean;
  isEN?: boolean;
}
const { title, description, ogType, hasBorder, isEN } = Astro.props;

const siteName = isEN
  ? 'A must-read for teachers Understanding Copyright in Classes'
  : '「先生にぜひ読んでほしい」すごくわかる著作権と授業 (すごわか)';

const siteDescription = isEN
  ? 'This material was designed primarily for teachers at educational institutions. This has been produced by AXIES with a grant from the Common Purpose Fund of the Society for the Administration of Remuneration for Public Transmission for School Lessons (SARTRAS).'
  : 'このサイトは、主に教育機関で授業をされている先生を対象に著作権について説明しています。SARTRAS（授業目的公衆送信補償金等管理協会）の共通目的基金の助成を受けて、AXIES（大学ICT推進協議会）が制作しています。';
---

<!doctype html>
<html lang={isEN ? 'en' : 'ja'} class="scroll-pt-10 scroll-smooth" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title ? title + '｜' + siteName : siteName}</title>
    <meta name="description" content={description ?? siteDescription} />
    <link rel="canonical" href={Astro.site + Astro.url.pathname} />
    <meta property="og:locale" content={isEN ? 'en_US' : 'ja_JP'} />
    <meta property="og:type" content={ogType ?? 'article'} />
    <meta property="og:title" content={title ? title + '｜' + siteName : siteName} />
    <meta property="og:description" content={description ?? siteDescription} />
    <meta property="og:url" content={Astro.site + '/'} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={Astro.site + '/im-ogp' + (isEN ? '_en' : '') + '.png'} />
    <meta property="og:image:alt" content={siteName} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:type" content="image/png" />
    <meta name="twitter:card" content="summary_large_image" />
    <link rel="apple-touch-icon" sizes="192x192" href={Astro.site + '/cropped-favicon-192x192.png'} />
    <meta name="msapplication-TileImage" content={Astro.site + '/cropped-favicon-270x270.png'} />
    <script src="../scripts/index.ts"></script>
  </head>
  <body
    class={twJoin(
      'font-noto text-[0.9375rem]/relaxed text-stone-700 antialiased md:text-base/relaxed',
      hasBorder ? 'border-t-4 border-orange-400 bg-orange-100' : 'bg-orange-200'
    )}
  >
    <slot />
    <Footer isEN={isEN} />
    <script type="module" define:vars={{ pageData }}>
      /**
       * 検索フォームの入力値に応じて検索結果を表示
       */
      const resultBlock = document.querySelector('.js-search-result');
      const form = document.querySelector('.js-search-form');
      const input = form.querySelector('input');
      const submitButton = form.querySelector('button');

      const resetResult = () => {
        resultBlock.innerHTML = '';
        resultBlock.classList.add('invisible');
        resultBlock.classList.remove('pt-4');
      };

      input.addEventListener('input', (e) => {
        submitButton.disabled = e.currentTarget.value === '';
        if (e.currentTarget.value === '') {
          resetResult();
        }
      });

      form.addEventListener('submit', (e) => {
        e.preventDefault();

        let hasResult = false;
        const searchWord = input.value;

        if (searchWord === '') {
          return;
        }

        if (document.querySelector('.js-no-result')) {
          document.querySelector('.js-no-result').remove();
        }

        resetResult();

        resultBlock.classList.remove('invisible');
        resultBlock.classList.add('pt-4');

        const getMatches = (type, text, searchWord) => {
          const excludedPattern = /Memo|閉じる/g;
          const matches = text.match(new RegExp(`[^。！？\\n]*${searchWord}[^。！？\\n]*[。！？]?`, 'gi')) || [];
          return matches.map(match => ({type, string: match.replace(excludedPattern, '').trim()}));
        };

        pageData.forEach(({ title, href, sections, modals }) => {
          let sentenceList = [];
          let modalList = [];
          sections.forEach((section) => {
            const matches = getMatches('sentence', section, searchWord);
            if (matches.length > 0) {
              sentenceList.push(...matches);
            }
          });
          modals.forEach((modal) => {
            const matches = getMatches('modal', modal, searchWord);
            if (matches.length > 0) {
              modalList.push(...matches);
            }
          });
          // モーダルに含まれる文を除外
          const filteredSentenceList = sentenceList.filter(({string}) => {
            return !modalList.some(modal => modal.string.includes(string));
          });
          // モーダルに含まれる文を除外した一文とモーダルを統合
          const allMatches = [...filteredSentenceList, ...modalList];

          if (allMatches.filter(match => match.type === 'sentence').length > 0) {
            console.log(allMatches.length)
            resultBlock.insertAdjacentHTML('afterbegin', '<ul></ul>');
            resultBlock.insertAdjacentHTML('afterbegin', `<div class="text-lg font-bold [*+&]:mt-4">${title}</div>`);

            let index = 0;
            for (const {type, string} of allMatches) {
              // ひとまずモーダルに関しては検索結果に表示しない
              if (type === 'modal') {
                continue;
              }

              hasResult = true;

              const params = new URLSearchParams(location.search);
              const spannedSentence = string.replaceAll(
                new RegExp(`(${searchWord})`, 'gi'),
                `<span class="js-hit font-bold text-orange-600 bg-yellow-100">$1</span>`
              );
              params.set('s', searchWord);
              params.set('i', index.toString());
              resultBlock.querySelector('ul').insertAdjacentHTML(
                'beforeend',
                `<li class="border-t border-orange-300">
                  <a class="p-2 block hover:bg-orange-200" href="${href}?${params.toString()}">${spannedSentence}</a>
                </li>`
              );
              index++;
            }
          }
        });

        if (!hasResult) {
          resultBlock.insertAdjacentHTML('afterbegin', '<p class="js-no-result">検索結果が見つかりませんでした。</p>');
        }
      });

      /**
       * パラメータから情報を取得し、検索結果のハイライト・スクロールを行う
       */
      const params = new URL(document.location.href).searchParams;
      const search = params.get('s');
      const index = Number(params.get('i'));

      const mainElement = document.querySelector('main');
      if (mainElement && search) {
        const regex = new RegExp(`(${search})`, 'gi');

        const highlightText = (node) => {
          if (node.nodeValue.trim() === '') {
            return;
          }
          const text = node.nodeValue
            .trim()
            .replace(/\s{2,}/, ' ')
            .replace('\n', '');
          // テキストノードを部分的にハイライトするために正規表現で分割
          const parts = text.split(regex);

          if (parts.length > 1) {
            // テキストノードのパーツを加工して追加するための fragment を作成
            const fragment = document.createDocumentFragment();

            // 検索ワードと一致する場合はテキストノードのパーツを span で囲み、それ以外はそのまま追加
            parts.forEach((part) => {
              if (regex.test(part)) {
                const span = document.createElement('span');
                span.className = 'js-hit font-bold text-orange-600 bg-yellow-100';
                span.textContent = part;
                fragment.appendChild(span);
              } else {
                fragment.appendChild(document.createTextNode(part));
              }
            });

            // 既存のテキストノードをハイライトしたものに置換
            node.parentNode.replaceChild(fragment, node);
          }
        };

        // 再帰的にテキストノードを取得
        const textNodes = [];
        const getTextNodes = (element) => {
          element.childNodes.forEach((child) => {
            if (child.nodeType === Node.TEXT_NODE) {
              textNodes.push(child);
            } else if (child.nodeType === Node.ELEMENT_NODE) {
              getTextNodes(child);
            }
          });
        };

        getTextNodes(mainElement);

        textNodes.forEach((node) => {
          highlightText(node);
        });

        document.querySelectorAll('.js-hit').forEach((el, i) => {
          if (i === index) {
            el.scrollIntoView({
              behavior: 'smooth',
              block: 'center',
              inline: 'center',
            });
          }
        });
      }
    </script>
  </body>
</html>
