---
import type { HTMLAttributes } from 'astro/types';
import { log } from 'console';

interface Props extends HTMLAttributes<'a'> {
  href: string;
}

const isBasis = Astro.url.pathname === '/basis'

const { href, ...attrs } = Astro.props;

const activeClassA = href === new URL(Astro.request.url).pathname ? 'text-orange-600 before:bg-orange-500 md:py-2 before:z-30' : 'before:bg-stone-500 md:py-1 md:before:hidden';
---
<li
  class={`${href === new URL(Astro.request.url).pathname && "relative before:absolute before:top-5 before:left-[7.5px] before:h-[calc(100%-32px)] before:w-px before:bg-stone-200 before:content-[''] md:before:top-[14.5px]"} border-b border-stone-200 last-of-type:border-0 md:border-0`}>
  <a
    href={href}
    class={`${activeClassA} flex gap-2.5 py-3 pr-2 before:mx-[2.5px] before:mt-[6.5px] before:block before:h-[11px] before:min-h-[11px] before:w-[11px] before:min-w-[11px] before:rounded-full before:border before:border-white before:content-[''] md:px-0`} {...attrs}>
    <div class="flex w-full items-center">
      <p class="flex-1">
        <slot />
      </p>
      <img src="/assets/images/chevron-right.svg" alt="" class={`md:hidden ${href === new URL(Astro.request.url).pathname && "hidden"}`} />
    </div>
  </a>
  {href === new URL(Astro.request.url).pathname && (
    <div class="sub-menu">
    </div>
  )}
  <!-- {!isBasis && (
    <div class="sub-menu">
      basis
    </div>
  )} -->
</li>
